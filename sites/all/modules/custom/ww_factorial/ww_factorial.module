<?php

/**
 * @file
 * Este modulo sirve para sacar el factorial de un numero, entre otras 
 * funciones.
 */

/**
 * Implements hook_menu().
 */
function ww_factorial_menu() {
  $items['calculo/factorial'] = array(
    'title' => "Calculando factorial",
    'description' => 'This is a test.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('operation_factorial_form'),
    'access arguments' => array('administer my module'),
    'access callback' => TRUE,
    'file' => 'ww_factorial_operacion.inc',
  );
  $items['admin/config/content/calculo'] = array(
    'title' => 'Factorial',
    'description' => 'Configure the options for the factorial',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('factorial_configuracion'),
    'access arguments' => array('configure my module'),
    'file' => 'ww_factorial_operacion.inc',
  );
  $items['funcion/numeros'] = array(
    'title' => "Listando numeros",
    'description' => 'This is a test.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('list_numbers_form'),
    'access arguments' => array('administer my module'),
    //'access callback' => TRUE,
    'file' => 'ww_factorial_operacion.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ww_factorial_permission() {
  return array(
    'administer my module' => array(
      'title' => t('Administer my module'),
      'description' => t('Perform administration tasks for my module.'),
    ),
    'configure my module' => array(
      'title' => t('Configure my module'),
      'description' => t('Site for configure the module of factorial'),
    ),
  );
}

function ww_factorial_menu_entrar() {
  $num = rand(0, 1);
  //dpm($num,'num');
  // Ejemplo.
  if ($num > 0.5) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/*
 * Implements hook_block_info().
 */

function ww_factorial_block_info() {
  $blocks = array();

  $blocks['info'] = array(
    'info' => t('Factorial')
  );

  return $blocks;
}

/**
 * Implements hook_block_view
 */
function ww_factorial_block_view($delta = '') {
  $block = array();
  $block['subject'] = t('Block of factorial');
  $block['content'] = t('This is a example');
  return $block;
}

/**
 * Implements hook_menu_alter().
 */
function ww_factorial_menu_alter(&$items) {
  $variables = array(
    'message' => variable_get('titulo_factorial', 'Calculando factorial'),
  );
  if (!empty($variables)) {
    $items['calculo/factorial']['title'] = $variables;
  }
  //dpm($variables, 'VARIABLES');
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function ww_factorial_node_info() {
  // We define the node type as an associative array.
  return array(
    'ww_factorial' => array(
      'name' => t('Example Node Type'),
      // 'base' tells Drupal the base string for hook functions.
      // This is often the module name; if base is set to 'mymodule',
      // Drupal would call mymodule_insert() or similar for node
      // hooks. In our case, the base is 'ww_factorial'.
      'base' => 'ww_factorial',
      'description' => t('This is an example node type with a few fields.'),
      'title_label' => t('Example of Title'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_type_insert().
 *
 * Much like hook_node_insert() lets us know that a node is being
 * inserted into the database, hook_node_type_insert() lets us know
 * that a new content type has been inserted.
 *
 * Since Drupal will at some point insert our new content type,
 * this gives us a chance to add the fields we want.
 *
 * It is called for all inserts to the content type database, so
 * we have to make sure we're only modifying the type we're
 * concerned with.
 */
function ww_factorial_node_type_insert($content_type) {
  dpm($content_type, 'content_type');
  if ($content_type->type == 'ww_factorial') {
    // First we add the body field. Node API helpfully gives us
    // node_add_body_field().
    // We'll set the body label now, although we could also set
    // it along with our other instance properties later.
    $body_instance = node_add_body_field($content_type, t('Example Description'));

    // Add our example_node_list view mode to the body instance
    // display by instructing the body to display as a summary
    $body_instance['display']['example_node_list'] = array(
      'label' => 'hidden',
      'type' => 'text_summary_or_trimmed',
    );

    // Save our changes to the body field instance.
    field_update_instance($body_instance);

    // Create all the fields we are adding to our content type.
    foreach (_ww_factorial_installed_fields() as $field) {
      field_create_field($field);
    }
//
    // Create all the instances for our fields.
    foreach (_ww_factorial_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'ww_factorial';
      field_create_instance($instance);
    }
  }
}

/**
 * Define the fields for our content type.
 *
 * This big array is factored into this function for readability.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 */
function _ww_factorial_installed_fields() {
  return array(
    'ww_factorial_color' => array(
      'field_name' => 'ww_factorial_color',
      'cardinality' => 3,
      'type' => 'text',
      'settings' => array(
        'max_length' => 60,
      ),
    ),
    'ww_factorial_quantity' => array(
      'field_name' => 'ww_factorial_quantity',
      'cardinality' => 1,
      'type' => 'text',
    ),
    'ww_factorial_image' => array(
      'field_name' => 'ww_factorial_image',
      'type' => 'image',
      'cardinality' => 1,
    ),
  );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "ww_factorial_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 */
function _ww_factorial_installed_instances() {
  return array(
    'ww_factorial_color' => array(
      'field_name' => 'ww_factorial_color',
      'label' => t('The colors available for this object.'),
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'ww_factorial_colors',
        ),
      ),
    ),
    'ww_factorial_quantity' => array(
      'field_name' => 'ww_factorial_quantity',
      'label' => t('Quantity required'),
      'type' => 'text',
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'ww_factorial_image' => array(
      'field_name' => 'ww_factorial_image',
      'label' => t('Upload an image:'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'image_image',
        'weight' => 2.10,
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'image_link_content__thumbnail',
        ),
      ),
    ),
  );
}

//function ww_factorial_entity_info_alter(&$entity_info) {
//  // Add our new view mode to the list of view modes...
//  $entity_info['node']['view modes']['example_node_list'] = array(
//    'label' => t('Example Node List'),
//    'custom settings' => TRUE,
//  );
//}
