<?php
function ww_mailfish_menu() {
  $items = array();
  $items['admin/config/content/mailfish'] = array(
    'title' => 'ww_mailfish Settings',
    'description' => 'Administer ww_mailfish Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ww_mailfish_admin_settings_form'),
    'access arguments' => array('manage ww_mailfish settings'),
    'file' => 'ww_mailfish.admin.inc',
  );
  $items['admin/reports/mailfish'] = array(
    'title' => 'ww_mailfish Signups',
    'description' => 'View ww_mailfish Signups',
    'page callback' => 'ww_mailfish_signups',
    'access arguments' => array('view ww_mailfish subscriptions'),
    'file' => 'ww_mailfish.admin.inc',
  );
  return $items;
}
/**
 * Implements hook_permission().
 * @return perm. 
 */
function ww_mailfish_permission() {
  $perm = array(
  'view ww_mailfish subscriptions' => array(
  'title' => t('View ww_mailfish subscriptions'),
    ),
  'create ww_mailfish subscription' => array(
  'title' => t('create ww_mailfish subscriptions'),
    ),
  'manage ww_mailfish settings' => array(
  'title' => t('Manage ww_mailfish settings'),
    )
  );
  return $perm;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ww_mailfish_form_node_form_alter(&$form, $form_state) {
 // dpm($form);
  
  $node = $form['#node'];
// Perform our check to see if we should be performing an action as the very first action.
  $types = variable_get('ww_mailfish_types', array());
// Check if this node type is enabled for ww_mailfish
// and that the user has access to the per-node settings.
  if (isset($types[$node->type]) && user_access('manage ww_mailfish settings')) {
// Add a new fieldset with a checkbox for per-node ww_mailfish setting.
    $form['ww_mailfish'] = array(
      '#title' => t('ww_mailfish'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
    );
    $form['ww_mailfish']['ww_mailfish_enabled'] = array(
      '#title' => t('Collect e-mail addresses for this node.'),
      '#type' => 'checkbox',
      '#default_value' => isset($node->ww_mailfish_enabled) ? $node->ww_mailfish_enabled : FALSE,
    );
  }
}
/**
 * Implements hook_form_alter().
 */
function ww_mailfish_form_alter(&$form, &$form_state, $form_id){
 
  if ($form_id == "search_block_form"){
     
  $form['pass'] = array(

  '#type' => '', 

  '#title' => t('Password'), 

  '#maxlength' => 64, 

  '#size' => 15,

); 
  }
}

function ww_mailfish_signups() {
  return t('This a test for the module');
}

/**
* Provide the form to add an email address.
*/
function ww_mailfish_email_form($form, $form_state, $nid = 0) {
  global $user;
  //dpm($nid,'nid');
  $form['email'] = array(
    '#title' => t('Email address'),
    '#type' => 'textfield',
    '#size' => 20,
    '#description' => t('Join our mailing list'),
    '#default_value' => isset($user->mail) ? $user->mail : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up'),
  );
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );
  
  return $form;
}

/**
* Provide the form for the block content.
*
* This form is the same as the node form,
* but with a different form_id to prevent
* conflict.
*/
function ww_mailfish_email_block_form($form, $form_state) {
  $form = ww_mailfish_email_form($form, $form_state);
  $form['#validate'][] = 'ww_mailfish_email_form_validate';
  $form['#submit'][] = 'ww_mailfish_email_form_submit';
  return $form;
}

/**
* Validation handler for ww_mailfish_email_form.
*/
function ww_mailfish_email_form_validate($form, &$form_state) {
  $email = $form_state['values']['email'];
  if (!$email) {
    form_set_error('email', t('You must provide an email address in order to join a mailing list.'));
  }
  elseif (!valid_email_address($email)) {
    $message = t('The address %email is not a valid email address. Please re-enter your address.', array('%email' => $email));
    form_set_error('email', $message);
  }
  $nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : 0;
  if (!ww_mailfish_get_node_enabled($nid) && $nid != 0) {
    form_set_error('', t('ww_mailfish subscriptions are not available for this node.'));
  }
// Do not allow multiple signups for the same node and email address.
  $previous_signup = db_query("SELECT mail FROM {ww_mailfish} WHERE nid= :nid AND mail = :mail", array('nid' => $nid, 'mail' => $email))->fetchField();
  if ($previous_signup) {
    form_set_error('email', t('The address %email is already subscribed to this list.', array('%email' => $email)));
  }
}

/**
* Submission handler for ww_mailfish_email_form.
*/
function ww_mailfish_email_form_submit($form, &$form_state) {
  // The sitewide signup form will not have a set $form['#node'].
  $nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : 0;
  if ($nid) { // Comment: it might be a good idea to add an extra is_numeric($nid) check here
    $node = node_load($nid);
  }
  // The sitewide signup form will not have a title, retrieve and use the site's name.
  $title = isset($node) ? $node->title : variable_get('site_name', 'Drupal');
  // Signup the user.
  ww_mailfish_signup($form_state['values']['email'], $nid);
  // Provide the user with a translated confirmation message.
  drupal_set_message(t('Thank you for joining the mailing list for %title. You have been added as %email.', array('%title' => $title, '%email' => $form_state['values']['email'])));
}

/**
* Implements hook_node_load().
*/
function ww_mailfish_node_load($nodes, $types) {
  //dpm($nodes,'nodes');
  foreach ($nodes as $nid => $node) {
  // Add mailfish data to the node object when it is loaded.
  $node->ww_mailfish_enabled = ww_mailfish_get_node_enabled($node->nid);
  }
}
/**
* Implements hook_node_insert().
*/
function ww_mailfish_node_insert($node) {
  if ($node->ww_mailfish_enabled) {
  // If MailFish is enabled, store the record.
  ww_mailfish_set_node_enabled($node->nid);
  }
}

/**
* Implements hook_node_update().
*/
function ww_mailfish_node_update($node) {
  // Delete the old record, if one exists.
  ww_mailfish_delete_node_enabled($node->nid);
  if ($node->ww_mailfish_enabled) {
  // If MailFish is enabled, store the record.
  ww_mailfish_set_node_enabled($node->nid);
  }
}
/**
* Implements hook_node_delete().
*/
function ww_mailfish_node_delete($node) {
  // Delete the mailfish_enabled record when the node is deleted.
  ww_mailfish_delete_node_enabled($node->nid);

}

/**
* Implements hook_node_view().
*/
function ww_mailfish_node_view($node, $view_mode, $langcode) {
// If appropriate, add the mailfish email form to the node's display.
  $form=drupal_get_form('ww_mailfish_email_form', $node->nid);
  if ($node->ww_mailfish_enabled && user_access('create mailfish subscription')) {
    $node->content['ww_mailfish'] = array(
      '#markup' => drupal_render($form),
      '#weight' => 100,
    );
  }
}

function ww_mailfish_get_node_enabled($nid) {
  if (is_numeric($nid)) {
    $result = db_query("SELECT nid FROM {ww_mailfish_enabled} WHERE nid= :nid", array('nid' => $nid))->fetchField();
    if ($result) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Add an entry for a node's mailfish setting.
*
* @param int $nid
* The node id of the node in question.
*/
function ww_mailfish_set_node_enabled($nid) {
  if (is_numeric($nid)) {
    if (!ww_mailfish_get_node_enabled($nid)) {
      $jump = db_insert('ww_mailfish_enabled')
      ->fields(array('nid' => $nid))
      ->execute();
    }
  }
}
/**
* Remove an entry for a node's mailfish setting.
*
* @param int $nid
* The node id of the node in question.
*/
function ww_mailfish_delete_node_enabled($nid) {
  if (is_numeric($nid)) {
    $vump = db_delete('ww_mailfish_enabled')
    ->condition('nid', $nid)
    ->execute();
  }
}
/**
* Store a mailfish email signup.
*/
function ww_mailfish_signup($email, $nid, $account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  $value = array(
    'nid' => $nid,
    'uid' => $account->uid,
    'mail' => $email,
    'created' => time(),
  );
  drupal_alter('ww_mailfish_signup', $value);
  module_invoke_all('ww_mailfish_signup', $value);
  $_SESSION['ww_mailfish'] = $nid;
  drupal_write_record('ww_mailfish', $value);
  watchdog('ww_mailfish', 'User @uid signed up for node @nid with
  @email', array('@uid' => $account->uid, '@nid' => $nid, '@email' =>
  $email));
}
/**
 * Implements hook_block_info().
 */
function ww_mailfish_block_info() {
  $blocks = array();
  $blocks['ww_mailfish_subscribe'] = array(
    'info' => t('MailFish Signup Form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function ww_mailfish_block_view($delta = 'ww_mailfish_subscribe') {
  $block = array();
  $form=drupal_get_form('ww_mailfish_email_block_form');
  dpm($delta,'delta');
  switch ($delta) {
  case 'ww_mailfish_subscribe':
  $block['subject'] = t('Sign up for %site', array(
    '%site' =>variable_get('site_name', 'Drupal')));
  $block['content'] = theme('ww_mailfish_block', array(
    'rendered_form' => drupal_render($form)));
  break;
}
return $block;
}

/**
* Implementation of hook_theme().
*/
function ww_mailfish_theme() {
  $theme = array();
  $theme['ww_mailfish_block'] = array(
    'variables' => array(
    'rendered_form' => NULL,
    ),
    'template' => 'ww_mailfish-block',
  );
  return $theme;
}

/**
* Implements hook_field_formatter_info().
*/
function ww_mailfish_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'ww_mailfish_no_spam' => array(
    'label' => t('Spam-preventing email display'),
    'field types' => array('email'),
    ),
  );
}

/**
* Implements hook_field_formatter_view().
*/
function ww_mailfish_field_formatter_view($object_type, $object,
  $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
  case 'ww_mailfish_no_spam':
    foreach ($items as $delta => $item) {
      $email = $item['email'];
      $element[$delta] = array('#markup' => str_replace('@', ' [at] ', $email));
    }
  break;
  }
  return $element;
}


